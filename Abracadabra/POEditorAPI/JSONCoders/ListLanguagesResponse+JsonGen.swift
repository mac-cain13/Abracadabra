//
//  ListLanguagesResponse+JsonGen.swift
//
//  Auto generated by swift-json-gen on Fri, 24 Feb 2017 21:54:53 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension ListLanguagesResponse {
  static func decodeJson(_ json: Any) throws -> ListLanguagesResponse {
    let decoder = try JsonDecoder(json: json)

    let _result = try decoder.decode("result", decoder: ListLanguagesResponse.Result.decodeJson)

    guard let result = _result else {
      throw JsonDecodeError.structErrors(type: "ListLanguagesResponse", errors: decoder.errors)
    }

    return ListLanguagesResponse(result: result)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["result"] = result.encodeJson()

    return dict
  }
}

extension ListLanguagesResponse.Result {
  static func decodeJson(_ json: Any) throws -> ListLanguagesResponse.Result {
    let decoder = try JsonDecoder(json: json)

    let _languages = try decoder.decode("languages", decoder: Array.decodeJson(ListLanguagesResponse.Result.Language.decodeJson))

    guard let languages = _languages else {
      throw JsonDecodeError.structErrors(type: "ListLanguagesResponse.Result", errors: decoder.errors)
    }

    return ListLanguagesResponse.Result(languages: languages)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["languages"] = languages.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension ListLanguagesResponse.Result.Language {
  static func decodeJson(_ json: Any) throws -> ListLanguagesResponse.Result.Language {
    let decoder = try JsonDecoder(json: json)

    let _name = try decoder.decode("name", decoder: String.decodeJson)
    let _code = try decoder.decode("code", decoder: String.decodeJson)
    let _percentage = try decoder.decode("percentage", decoder: Double.decodeJson)

    guard
      let name = _name,
      let code = _code,
      let percentage = _percentage
    else {
      throw JsonDecodeError.structErrors(type: "ListLanguagesResponse.Result.Language", errors: decoder.errors)
    }

    return ListLanguagesResponse.Result.Language(name: name, code: code, percentage: percentage)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["name"] = name.encodeJson()
    dict["code"] = code.encodeJson()
    dict["percentage"] = percentage.encodeJson()

    return dict
  }
}
